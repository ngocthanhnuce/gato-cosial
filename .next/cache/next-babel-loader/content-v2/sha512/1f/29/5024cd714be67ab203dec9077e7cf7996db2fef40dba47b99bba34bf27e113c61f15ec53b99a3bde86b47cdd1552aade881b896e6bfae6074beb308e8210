{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\social_network\\\\gato-cosial\\\\pages\\\\index.js\";\n// @ts-nocheck\nimport React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport baseUrl from \"../utils/baseUrl\";\nimport { NoPosts } from \"../components/Layout/Nodata\";\nimport CreatePost from \"../components/Post/CreatePost\";\nimport CardPost from \"../components/Post/CardPost\";\nimport { Segment } from \"semantic-ui-react\";\nimport { parseCookies } from \"nookies\";\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\nimport { EndMessage, PlaceHolderPosts } from \"../components/Layout/PlaceHolderGroup\";\n\nfunction Index(props) {\n  const {\n    user,\n    postsData,\n    errorLoading\n  } = props;\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsData);\n  const {\n    0: showToastr,\n    1: setShowToastr\n  } = useState(false);\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(2);\n  const {\n    0: newNotification,\n    1: setNewNotification\n  } = useState(null);\n  const {\n    0: notificationPopup,\n    1: showNotificationPopup\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const socket = useRef();\n  useEffect(() => {\n    // if (!socket.current) {\n    //   socket.current = io(baseUrl);\n    // }\n    // if (socket.current) {\n    //   socket.current.emit(\"join\", { userId: user._id });\n    // }\n    document.title = `Welcome ${user.name}`; // return () => {\n    //   if (socket.current) {\n    //     socket.current.emit(\"disconnect\");\n    //     socket.current.off();\n    //   }\n    // };\n  }, []);\n  useEffect(() => {\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\n  }, [showToastr]);\n\n  const fetchDataOnScroll = async () => {\n    try {\n      const res = await axios.get(`${baseUrl}/api/posts`, {\n        headers: {\n          Authorization: cookie.get(\"token\")\n        },\n        params: {\n          pageNumber\n        }\n      });\n      if (res.data.length === 0) setHasMore(false);\n      setPosts(prev => [...prev, ...res.data]);\n      setPageNumber(prev => prev + 1);\n    } catch (error) {\n      alert(\"Bạn đã đọc hết tin\");\n    }\n  };\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"newNotificationReceived\", ({\n        name,\n        profilePicUrl,\n        username,\n        postId\n      }) => {\n        setNewNotification({\n          name,\n          profilePicUrl,\n          username,\n          postId\n        });\n        showNotificationPopup(true);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [notificationPopup && newNotification !== null && /*#__PURE__*/_jsxDEV(NotificationPortal, {\n      newNotification: newNotification,\n      notificationPopup: notificationPopup,\n      showNotificationPopup: showNotificationPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), showToastr && /*#__PURE__*/_jsxDEV(PostDeleteToastr, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"15px\",\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(CreatePost, {\n        user: user,\n        setPosts: setPosts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n          hasMore: hasMore,\n          next: fetchDataOnScroll,\n          loader: /*#__PURE__*/_jsxDEV(PlaceHolderPosts, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this),\n          endMessage: /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this),\n          dataLength: posts.length,\n          children: posts.map(post => /*#__PURE__*/_jsxDEV(CardPost, {\n            socket: socket,\n            post: post,\n            user: user,\n            setPosts: setPosts,\n            setShowToastr: setShowToastr\n          }, post._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nIndex.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: {\n        Authorization: token\n      },\n      params: {\n        pageNumber: 1\n      }\n    });\n    return {\n      postsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Index;","map":{"version":3,"sources":["E:/social_network/gato-cosial/pages/index.js"],"names":["React","useEffect","useState","useRef","axios","io","baseUrl","NoPosts","CreatePost","CardPost","Segment","parseCookies","NotificationPortal","InfiniteScroll","PostDeleteToastr","EndMessage","PlaceHolderPosts","Index","props","user","postsData","errorLoading","posts","setPosts","showToastr","setShowToastr","pageNumber","setPageNumber","newNotification","setNewNotification","notificationPopup","showNotificationPopup","hasMore","setHasMore","socket","document","title","name","setTimeout","fetchDataOnScroll","res","get","headers","Authorization","cookie","params","data","length","prev","error","alert","current","on","profilePicUrl","username","postId","marginTop","marginBottom","map","post","_id","getInitialProps","ctx","token"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\nimport baseUrl from \"../utils/baseUrl\";\r\nimport { NoPosts } from \"../components/Layout/Nodata\";\r\nimport CreatePost from \"../components/Post/CreatePost\";\r\nimport CardPost from \"../components/Post/CardPost\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { parseCookies } from \"nookies\";\r\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\r\nimport { EndMessage, PlaceHolderPosts } from \"../components/Layout/PlaceHolderGroup\";\r\n\r\nfunction Index(props) {\r\n  const { user, postsData, errorLoading } = props;\r\n  const [posts, setPosts] = useState(postsData);\r\n  const [showToastr, setShowToastr] = useState(false);\r\n  const [pageNumber, setPageNumber] = useState(2);\r\n  const [newNotification, setNewNotification] = useState(null);\r\n  const [notificationPopup, showNotificationPopup] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const socket = useRef();\r\n\r\n  useEffect(() => {\r\n    // if (!socket.current) {\r\n    //   socket.current = io(baseUrl);\r\n    // }\r\n    // if (socket.current) {\r\n    //   socket.current.emit(\"join\", { userId: user._id });\r\n    // }\r\n    document.title = `Welcome ${user.name}`;\r\n    // return () => {\r\n    //   if (socket.current) {\r\n    //     socket.current.emit(\"disconnect\");\r\n    //     socket.current.off();\r\n    //   }\r\n    // };\r\n  }, []);\r\n  useEffect(() => {\r\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\r\n  }, [showToastr]);\r\n\r\n  const fetchDataOnScroll = async () => {\r\n    try {\r\n      const res = await axios.get(`${baseUrl}/api/posts`, {\r\n        headers: { Authorization: cookie.get(\"token\") },\r\n        params: { pageNumber },\r\n      });\r\n\r\n      if (res.data.length === 0) setHasMore(false);\r\n\r\n      setPosts((prev) => [...prev, ...res.data]);\r\n      setPageNumber((prev) => prev + 1);\r\n    } catch (error) {\r\n      alert(\"Bạn đã đọc hết tin\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\r\n        \"newNotificationReceived\",\r\n        ({ name, profilePicUrl, username, postId }) => {\r\n          setNewNotification({ name, profilePicUrl, username, postId });\r\n\r\n          showNotificationPopup(true);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n  \r\n  return (\r\n    <>\r\n      {notificationPopup && newNotification !== null && (\r\n        <NotificationPortal\r\n          newNotification={newNotification}\r\n          notificationPopup={notificationPopup}\r\n          showNotificationPopup={showNotificationPopup}\r\n        />\r\n      )}\r\n      {showToastr && <PostDeleteToastr />}\r\n      <div style={{ marginTop: \"15px\", marginBottom: \"20px\" }}>\r\n        <CreatePost user={user} setPosts={setPosts} />\r\n        <Segment>\r\n          <InfiniteScroll\r\n            hasMore={hasMore}\r\n            next={fetchDataOnScroll}\r\n            loader={<PlaceHolderPosts />}\r\n            endMessage={<EndMessage />}\r\n            dataLength={posts.length}\r\n          >\r\n            {posts.map((post) => (\r\n              <CardPost\r\n                socket={socket}\r\n                key={post._id}\r\n                post={post}\r\n                user={user}\r\n                setPosts={setPosts}\r\n                setShowToastr={setShowToastr}\r\n              />\r\n            ))}\r\n          </InfiniteScroll>\r\n        </Segment>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async (ctx) => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/posts`, {\r\n      headers: { Authorization: token },\r\n      params: { pageNumber: 1 },\r\n    });\r\n\r\n    return { postsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}