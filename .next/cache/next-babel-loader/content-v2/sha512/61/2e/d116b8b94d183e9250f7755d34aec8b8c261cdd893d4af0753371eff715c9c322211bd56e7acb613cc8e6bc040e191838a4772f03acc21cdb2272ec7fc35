{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\social_network\\\\gato-cosial\\\\pages\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport baseUrl from \"../utils/baseUrl\";\nimport CreatePost from \"../components/Post/CreatePost\";\nimport CardPost from \"../components/Post/CardPost\";\nimport { Segment } from \"semantic-ui-react\";\nimport { parseCookies } from \"nookies\";\nimport { NoPosts } from \"../components/Layout/NoData\";\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { PlaceHolderPosts, EndMessage } from \"../components/Layout/PlaceHolderGroup\";\nimport cookie from \"js-cookie\";\nimport getUserInfo from \"../utils/getUserInfo\";\nimport MessageNotificationModal from \"../components/Home/MessageNotificationModal\";\nimport newMsgSound from \"../utils/newMsgSound\";\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\n\nfunction Index({\n  user,\n  postsData,\n  errorLoading\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsData || []);\n  const {\n    0: showToastr,\n    1: setShowToastr\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(2);\n  const socket = useRef();\n  const {\n    0: newMessageReceived,\n    1: setNewMessageReceived\n  } = useState(null);\n  const {\n    0: newMessageModal,\n    1: showNewMessageModal\n  } = useState(false);\n  const {\n    0: newNotification,\n    1: setNewNotification\n  } = useState(null);\n  const {\n    0: notificationPopup,\n    1: showNotificationPopup\n  } = useState(false);\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    }\n\n    if (socket.current) {\n      socket.current.emit(\"join\", {\n        userId: user._id\n      });\n      socket.current.on(\"newMsgReceived\", async ({\n        newMsg\n      }) => {\n        const {\n          name,\n          profilePicUrl\n        } = await getUserInfo(newMsg.sender);\n\n        if (user.newMessagePopup) {\n          setNewMessageReceived(_objectSpread(_objectSpread({}, newMsg), {}, {\n            senderName: name,\n            senderProfilePic: profilePicUrl\n          }));\n          showNewMessageModal(true);\n        }\n\n        newMsgSound(name);\n      });\n    }\n\n    document.title = `Welcome, ${user.name.split(\" \")[0]}`;\n    return () => {\n      if (socket.current) {\n        socket.current.emit(\"disconnect\");\n        socket.current.off();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\n  }, [showToastr]);\n\n  const fetchDataOnScroll = async () => {\n    try {\n      const res = await axios.get(`${baseUrl}/api/posts`, {\n        headers: {\n          Authorization: cookie.get(\"token\")\n        },\n        params: {\n          pageNumber\n        }\n      });\n      if (res.data.length === 0) setHasMore(false);\n      setPosts(prev => [...prev, ...res.data]);\n      setPageNumber(prev => prev + 1);\n    } catch (error) {\n      alert(\"Error fetching Posts\");\n    }\n  };\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"newNotificationReceived\", ({\n        name,\n        profilePicUrl,\n        username,\n        postId\n      }) => {\n        setNewNotification({\n          name,\n          profilePicUrl,\n          username,\n          postId\n        });\n        showNotificationPopup(true);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [notificationPopup && newNotification !== null && /*#__PURE__*/_jsxDEV(NotificationPortal, {\n      newNotification: newNotification,\n      notificationPopup: notificationPopup,\n      showNotificationPopup: showNotificationPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), showToastr && /*#__PURE__*/_jsxDEV(PostDeleteToastr, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 22\n    }, this), newMessageModal && newMessageReceived !== null && /*#__PURE__*/_jsxDEV(MessageNotificationModal, {\n      socket: socket,\n      showNewMessageModal: showNewMessageModal,\n      newMessageModal: newMessageModal,\n      newMessageReceived: newMessageReceived,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Segment, {\n      children: [/*#__PURE__*/_jsxDEV(CreatePost, {\n        user: user,\n        setPosts: setPosts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), posts.length === 0 || errorLoading ? /*#__PURE__*/_jsxDEV(NoPosts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        hasMore: hasMore,\n        next: fetchDataOnScroll,\n        loader: /*#__PURE__*/_jsxDEV(PlaceHolderPosts, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this),\n        endMessage: /*#__PURE__*/_jsxDEV(EndMessage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this),\n        dataLength: posts.length,\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(CardPost, {\n          socket: socket,\n          post: post,\n          user: user,\n          setPosts: setPosts,\n          setShowToastr: setShowToastr\n        }, post._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nIndex.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: {\n        Authorization: token\n      },\n      params: {\n        pageNumber: 1\n      }\n    });\n    return {\n      postsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Index;","map":{"version":3,"sources":["E:/social_network/gato-cosial/pages/index.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","CreatePost","CardPost","Segment","parseCookies","NoPosts","PostDeleteToastr","InfiniteScroll","PlaceHolderPosts","EndMessage","cookie","getUserInfo","MessageNotificationModal","newMsgSound","NotificationPortal","Index","user","postsData","errorLoading","posts","setPosts","showToastr","setShowToastr","hasMore","setHasMore","pageNumber","setPageNumber","socket","newMessageReceived","setNewMessageReceived","newMessageModal","showNewMessageModal","newNotification","setNewNotification","notificationPopup","showNotificationPopup","current","emit","userId","_id","on","newMsg","name","profilePicUrl","sender","newMessagePopup","senderName","senderProfilePic","document","title","split","off","setTimeout","fetchDataOnScroll","res","get","headers","Authorization","params","data","length","prev","error","alert","username","postId","map","post","getInitialProps","ctx","token"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport axios from \"axios\";\r\nimport baseUrl from \"../utils/baseUrl\";\r\nimport CreatePost from \"../components/Post/CreatePost\";\r\nimport CardPost from \"../components/Post/CardPost\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { parseCookies } from \"nookies\";\r\nimport { NoPosts } from \"../components/Layout/NoData\";\r\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { PlaceHolderPosts, EndMessage } from \"../components/Layout/PlaceHolderGroup\";\r\nimport cookie from \"js-cookie\";\r\nimport getUserInfo from \"../utils/getUserInfo\";\r\nimport MessageNotificationModal from \"../components/Home/MessageNotificationModal\";\r\nimport newMsgSound from \"../utils/newMsgSound\";\r\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\r\n\r\nfunction Index({ user, postsData, errorLoading }) {\r\n  const [posts, setPosts] = useState(postsData || []);\r\n  const [showToastr, setShowToastr] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  const [pageNumber, setPageNumber] = useState(2);\r\n\r\n  const socket = useRef();\r\n\r\n  const [newMessageReceived, setNewMessageReceived] = useState(null);\r\n  const [newMessageModal, showNewMessageModal] = useState(false);\r\n\r\n  const [newNotification, setNewNotification] = useState(null);\r\n  const [notificationPopup, showNotificationPopup] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!socket.current) {\r\n      socket.current = io(baseUrl);\r\n    }\r\n\r\n    if (socket.current) {\r\n      socket.current.emit(\"join\", { userId: user._id });\r\n\r\n      socket.current.on(\"newMsgReceived\", async ({ newMsg }) => {\r\n        const { name, profilePicUrl } = await getUserInfo(newMsg.sender);\r\n\r\n        if (user.newMessagePopup) {\r\n          setNewMessageReceived({\r\n            ...newMsg,\r\n            senderName: name,\r\n            senderProfilePic: profilePicUrl\r\n          });\r\n          showNewMessageModal(true);\r\n        }\r\n        newMsgSound(name);\r\n      });\r\n    }\r\n\r\n    document.title = `Welcome, ${user.name.split(\" \")[0]}`;\r\n\r\n    return () => {\r\n      if (socket.current) {\r\n        socket.current.emit(\"disconnect\");\r\n        socket.current.off();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\r\n  }, [showToastr]);\r\n\r\n  const fetchDataOnScroll = async () => {\r\n    try {\r\n      const res = await axios.get(`${baseUrl}/api/posts`, {\r\n        headers: { Authorization: cookie.get(\"token\") },\r\n        params: { pageNumber }\r\n      });\r\n\r\n      if (res.data.length === 0) setHasMore(false);\r\n\r\n      setPosts(prev => [...prev, ...res.data]);\r\n      setPageNumber(prev => prev + 1);\r\n    } catch (error) {\r\n      alert(\"Error fetching Posts\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\r\n        \"newNotificationReceived\",\r\n        ({ name, profilePicUrl, username, postId }) => {\r\n          setNewNotification({ name, profilePicUrl, username, postId });\r\n\r\n          showNotificationPopup(true);\r\n        }\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {notificationPopup && newNotification !== null && (\r\n        <NotificationPortal\r\n          newNotification={newNotification}\r\n          notificationPopup={notificationPopup}\r\n          showNotificationPopup={showNotificationPopup}\r\n        />\r\n      )}\r\n\r\n      {showToastr && <PostDeleteToastr />}\r\n\r\n      {newMessageModal && newMessageReceived !== null && (\r\n        <MessageNotificationModal\r\n          socket={socket}\r\n          showNewMessageModal={showNewMessageModal}\r\n          newMessageModal={newMessageModal}\r\n          newMessageReceived={newMessageReceived}\r\n          user={user}\r\n        />\r\n      )}\r\n\r\n      <Segment>\r\n        <CreatePost user={user} setPosts={setPosts} />\r\n\r\n        {posts.length === 0 || errorLoading ? (\r\n          <NoPosts />\r\n        ) : (\r\n          <InfiniteScroll\r\n            hasMore={hasMore}\r\n            next={fetchDataOnScroll}\r\n            loader={<PlaceHolderPosts />}\r\n            endMessage={<EndMessage />}\r\n            dataLength={posts.length}\r\n          >\r\n            {posts.map(post => (\r\n              <CardPost\r\n                socket={socket}\r\n                key={post._id}\r\n                post={post}\r\n                user={user}\r\n                setPosts={setPosts}\r\n                setShowToastr={setShowToastr}\r\n              />\r\n            ))}\r\n          </InfiniteScroll>\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nIndex.getInitialProps = async ctx => {\r\n  try {\r\n    const { token } = parseCookies(ctx);\r\n\r\n    const res = await axios.get(`${baseUrl}/api/posts`, {\r\n      headers: { Authorization: token },\r\n      params: { pageNumber: 1 }\r\n    });\r\n\r\n    return { postsData: res.data };\r\n  } catch (error) {\r\n    return { errorLoading: true };\r\n  }\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}